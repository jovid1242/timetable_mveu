const TelegramBot = require("node-telegram-bot-api");
const { getButtons } = require("./utils/buttons");
const getSheetTitle = require("./utils/getGroupName");
const groupHandler = require("./handlers/groupHandlers");
const getSheetData = require("./utils/getSheetData");

const token = process.env.BOT_TOKEN;
const clientUrl = process.env.CLIENT_URL;
const url = process.env.APP_URL;

class Bot {
  init(polling = false) {
    this.bot = new TelegramBot(token, { polling });
    if (!polling) {
      this.bot.setWebHook(`${url}/bot${token}`);
    }
    return this.bot;
  }

  launch() {
    this.bot.on("callback_query", async (msg) => {
      const data = msg.data.split("____");
      var chatId = msg.from.id;

      const dataSheets = await getSheetData(data[0], process.env[data[1]], 'all'); 
      
      function formatLesson(lesson) {
        const time = lesson[3];
        const subject = lesson[4];
        const teacher = lesson[5];
        const room = lesson[6] || "";

        if (
          time === undefined ||
          subject === undefined ||
          teacher === undefined ||
          room === undefined
        ) {
          return "";
        }

        return `${time}, <strong>${subject}</strong>, <u>${teacher}</u>, <b>${room}</b>`;
      }

      var formattedData = "";

      for (const day in dataSheets) {
        formattedData += `<b>${day}</b>: \n`;
        const lessons = dataSheets[day];
        lessons.forEach((lesson, index) => { 
          const formattedLesson = !formatLesson(lesson)
            ? formatLesson(lesson)
            : `${index + 1}) ${formatLesson(lesson)}\n`;
          formattedData += formattedLesson;
        });
        formattedData += "\n";
      }
      formattedData += `<a href="${clientUrl}?range=${data[0]}&spreadsheetId=${
        process.env[data[1]]
      }">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>`; 

      return this.bot.sendMessage(chatId, formattedData, {
        parse_mode: "HTML",
      });
    });

    this.bot.on("message", async (msg) => {
      const chatId = msg.chat.id;
      const text = msg.text;

      // start
      if (text === "/start") {
        this.bot.sendMessage(
          chatId,
          "–•—ç–π–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üóìÔ∏è, –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è ‚Äì —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
          {
            reply_markup: {
              keyboard: getButtons(chatId),
              resize_keyboard: true,
            },
          }
        );
      }

      if (text === "–∫—É—Ä—Å 1") {
        const groups = await getSheetTitle(process.env.COURSE_ONE);
        const res = groupHandler.handleShowGroups(groups, "COURSE_ONE");
        return await this.bot.sendMessage(chatId, res.text, res.buttons);
      }

      if (text === "–∫—É—Ä—Å 2") {
        const groups = await getSheetTitle(process.env.COURSE_TWO);
        const res = groupHandler.handleShowGroups(groups, "COURSE_TWO");
        return await this.bot.sendMessage(chatId, res.text, res.buttons);
      }

      if (text === "–∫—É—Ä—Å 3") {
        const groups = await getSheetTitle(process.env.COURSE_THERE);
        const res = groupHandler.handleShowGroups(groups, "COURSE_THERE");
        return await this.bot.sendMessage(chatId, res.text, res.buttons);
      }

      if (text === "–∫—É—Ä—Å 4") {
        const groups = await getSheetTitle(process.env.COURSE_FOUR);
        const res = groupHandler.handleShowGroups(groups, "COURSE_FOUR");
        return await this.bot.sendMessage(chatId, res.text, res.buttons);
      }
    });
  }
}

module.exports = new Bot();
